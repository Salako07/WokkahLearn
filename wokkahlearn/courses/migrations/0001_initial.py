# Generated by Django 4.2.7 on 2025-07-04 19:20

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField()),
                ('short_description', models.CharField(max_length=300)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('review', 'Under Review'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('thumbnail', models.ImageField(blank=True, upload_to='course_thumbnails/')),
                ('preview_video', models.URLField(blank=True)),
                ('estimated_duration', models.DurationField(help_text='Total estimated course duration')),
                ('learning_objectives', models.JSONField(default=list, help_text='List of learning objectives')),
                ('skills_gained', models.JSONField(default=list, help_text='Skills students will gain')),
                ('tags', models.JSONField(default=list, help_text='Course tags for search')),
                ('required_skills', models.JSONField(default=list, help_text='Required skills/knowledge')),
                ('programming_languages', models.JSONField(default=list, help_text='Programming languages used')),
                ('is_free', models.BooleanField(default=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('premium_only', models.BooleanField(default=False)),
                ('allow_enrollment', models.BooleanField(default=True)),
                ('max_students', models.PositiveIntegerField(blank=True, null=True)),
                ('certificate_enabled', models.BooleanField(default=True)),
                ('discussion_enabled', models.BooleanField(default=True)),
                ('total_enrollments', models.PositiveIntegerField(default=0)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_reviews', models.PositiveIntegerField(default=0)),
                ('completion_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseEnrollment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('enrolled', 'Enrolled'), ('completed', 'Completed'), ('dropped', 'Dropped'), ('suspended', 'Suspended')], default='enrolled', max_length=20)),
                ('enrollment_source', models.CharField(choices=[('direct', 'Direct Enrollment'), ('invitation', 'Invitation'), ('bulk', 'Bulk Enrollment'), ('api', 'API'), ('admin', 'Admin')], default='direct', max_length=20)),
                ('progress_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('lessons_completed', models.PositiveIntegerField(default=0)),
                ('exercises_completed', models.PositiveIntegerField(default=0)),
                ('total_study_time', models.DurationField(default=datetime.timedelta(0))),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_accessed', models.DateTimeField(auto_now=True)),
                ('certificate_issued', models.BooleanField(default=False)),
                ('certificate_issued_at', models.DateTimeField(blank=True, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='courses.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Course Enrollment',
                'verbose_name_plural': 'Course Enrollments',
                'ordering': ['-enrolled_at'],
                'unique_together': {('student', 'course')},
            },
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_required', models.BooleanField(default=True)),
                ('estimated_duration', models.DurationField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='courses.course')),
                ('prerequisites', models.ManyToManyField(blank=True, to='courses.module')),
            ],
            options={
                'verbose_name': 'Module',
                'verbose_name_plural': 'Modules',
                'ordering': ['course', 'order'],
                'unique_together': {('course', 'order')},
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField()),
                ('lesson_type', models.CharField(choices=[('video', 'Video Lesson'), ('text', 'Text/Reading'), ('interactive', 'Interactive Content'), ('quiz', 'Quiz'), ('exercise', 'Coding Exercise'), ('project', 'Project'), ('live', 'Live Session')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('content', models.TextField(blank=True, help_text='Main lesson content (markdown)')),
                ('video_url', models.URLField(blank=True)),
                ('video_duration', models.DurationField(blank=True, null=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('estimated_duration', models.DurationField()),
                ('is_preview', models.BooleanField(default=False, help_text='Available without enrollment')),
                ('is_required', models.BooleanField(default=True)),
                ('allow_discussion', models.BooleanField(default=True)),
                ('additional_resources', models.JSONField(default=list, help_text='Additional resources like links, files, etc.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='courses.module')),
                ('prerequisites', models.ManyToManyField(blank=True, to='courses.lesson')),
            ],
            options={
                'verbose_name': 'Lesson',
                'verbose_name_plural': 'Lessons',
                'ordering': ['module', 'order'],
                'unique_together': {('module', 'order')},
            },
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('exercise_type', models.CharField(choices=[('coding', 'Coding Exercise'), ('multiple_choice', 'Multiple Choice'), ('fill_blank', 'Fill in the Blanks'), ('project', 'Project'), ('challenge', 'Challenge'), ('quiz', 'Quiz')], max_length=20)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard'), ('expert', 'Expert')], max_length=10)),
                ('description', models.TextField()),
                ('programming_language', models.CharField(blank=True, max_length=50)),
                ('starter_code', models.TextField(blank=True)),
                ('solution_code', models.TextField(blank=True)),
                ('execution_config', models.JSONField(default=dict, help_text='Environment configuration for code execution')),
                ('test_case_data', models.JSONField(default=list, help_text='Test cases for automatic grading')),
                ('validation_code', models.TextField(blank=True, help_text='Custom validation code')),
                ('order', models.PositiveIntegerField(default=0)),
                ('max_attempts', models.PositiveIntegerField(blank=True, null=True)),
                ('time_limit', models.DurationField(blank=True, null=True)),
                ('points', models.PositiveIntegerField(default=10)),
                ('ai_hints_enabled', models.BooleanField(default=True)),
                ('ai_explanation_enabled', models.BooleanField(default=True)),
                ('hint_penalty', models.PositiveIntegerField(default=0, help_text='Points deducted for hints')),
                ('allow_collaboration', models.BooleanField(default=False)),
                ('peer_review_enabled', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercises', to='courses.lesson')),
            ],
            options={
                'verbose_name': 'Exercise',
                'verbose_name_plural': 'Exercises',
                'ordering': ['lesson', 'order'],
            },
        ),
        migrations.CreateModel(
            name='CourseCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='CSS icon class or emoji', max_length=50)),
                ('color', models.CharField(default='#007bff', help_text='Hex color code', max_length=7)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.coursecategory')),
            ],
            options={
                'verbose_name': 'Course Category',
                'verbose_name_plural': 'Course Categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.AddField(
            model_name='course',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='courses.coursecategory'),
        ),
        migrations.AddField(
            model_name='course',
            name='co_instructors',
            field=models.ManyToManyField(blank=True, related_name='courses_co_teaching', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='course',
            name='instructor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses_teaching', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='course',
            name='prerequisites',
            field=models.ManyToManyField(blank=True, to='courses.course'),
        ),
        migrations.CreateModel(
            name='LessonProgress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('skipped', 'Skipped')], default='not_started', max_length=20)),
                ('progress_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('time_spent', models.DurationField(default=datetime.timedelta(0))),
                ('notes', models.TextField(blank=True)),
                ('bookmarked', models.BooleanField(default=False)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_accessed', models.DateTimeField(auto_now=True)),
                ('enrollment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_progress', to='courses.courseenrollment')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.lesson')),
            ],
            options={
                'verbose_name': 'Lesson Progress',
                'verbose_name_plural': 'Lesson Progress',
                'ordering': ['lesson__order'],
                'unique_together': {('enrollment', 'lesson')},
            },
        ),
        migrations.CreateModel(
            name='ExerciseSubmission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('submitted_code', models.TextField()),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('passed', 'Passed'), ('failed', 'Failed'), ('partial', 'Partially Correct'), ('error', 'Execution Error')], default='submitted', max_length=20)),
                ('score', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('max_score', models.DecimalField(decimal_places=2, default=100.0, max_digits=5)),
                ('execution_output', models.TextField(blank=True)),
                ('execution_error', models.TextField(blank=True)),
                ('test_results', models.JSONField(default=dict)),
                ('execution_time', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True)),
                ('hints_used', models.PositiveIntegerField(default=0)),
                ('ai_help_used', models.BooleanField(default=False)),
                ('auto_graded', models.BooleanField(default=True, help_text='Whether submission was automatically graded')),
                ('instructor_feedback', models.TextField(blank=True)),
                ('attempt_number', models.PositiveIntegerField(default=1)),
                ('is_final_submission', models.BooleanField(default=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('graded_at', models.DateTimeField(blank=True, null=True)),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='courses.exercise')),
                ('graded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='graded_submissions', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercise_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Exercise Submission',
                'verbose_name_plural': 'Exercise Submissions',
                'ordering': ['-submitted_at'],
                'indexes': [models.Index(fields=['student', 'exercise'], name='courses_exe_student_b66ce1_idx'), models.Index(fields=['exercise', 'status'], name='courses_exe_exercis_af7b44_idx')],
            },
        ),
        migrations.CreateModel(
            name='CourseRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='courses.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Course Rating',
                'verbose_name_plural': 'Course Ratings',
                'unique_together': {('student', 'course')},
            },
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['status', 'difficulty_level'], name='courses_cou_status_2de482_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['category', 'is_free'], name='courses_cou_categor_9f8205_idx'),
        ),
    ]

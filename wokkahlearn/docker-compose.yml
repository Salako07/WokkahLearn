version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-wokkahlearn}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-1234}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - wokkahlearn_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - wokkahlearn_network

  # Django Backend (using host Docker for code execution)
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    restart: unless-stopped
    environment:
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-wokkahlearn-dev-secret-key-change-in-production}
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-1234}@db:5432/${DB_NAME:-wokkahlearn}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,nginx,wokkahlearn.com,www.wokkahlearn.com,${DOMAIN:-wokkahlearn.com}
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://localhost:80,https://localhost,https://${DOMAIN:-wokkahlearn.com}
      
      # Security settings (relaxed for development)
      - SECURE_SSL_REDIRECT=False
      - SESSION_COOKIE_SECURE=False
      - CSRF_COOKIE_SECURE=False
      - SECURE_HSTS_SECONDS=0
      
      # AI Service Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - AI_DEFAULT_PROVIDER=${AI_DEFAULT_PROVIDER:-mock}
      - AI_RATE_LIMIT_ENABLED=${AI_RATE_LIMIT_ENABLED:-True}
      - AI_CACHE_RESPONSES=${AI_CACHE_RESPONSES:-True}
      
      # Code Execution Configuration (HOST DOCKER)
      - CODE_EXECUTION_ENABLED=True
      - DOCKER_HOST=unix:///var/run/docker.sock
      - CODE_EXECUTION_TIMEOUT=30
      - MAX_MEMORY_USAGE=128
      - CODE_EXECUTION_NETWORK=wokkahlearn_execution
      
      # Email Configuration
      - EMAIL_BACKEND=${EMAIL_BACKEND:-django.core.mail.backends.console.EmailBackend}
      - MAILGUN_API_KEY=${MAILGUN_API_KEY:-}
      - MAILGUN_DOMAIN=${MAILGUN_DOMAIN:-mail.wokkah.com}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL:-WokkahLearn <noreply@wokkahlearn.com>}
      
      # File Storage (disabled for now)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME:-}
      - DO_SPACES_ENDPOINT=${DO_SPACES_ENDPOINT:-}
      - UPLOAD_PROVIDER=${UPLOAD_PROVIDER:-local}
      
    volumes:
      - .:/app
      - media_files:/app/media
      - static_files:/app/staticfiles
      # HOST DOCKER ACCESS
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker:ro
    ports:
      - "8000:8000"  
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/admin/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    networks:
      - wokkahlearn_network
      - wokkahlearn_execution  # For code execution containers
    command: >
      bash -c "
        echo '🚀 Starting WokkahLearn Backend...' &&
        echo 'Waiting for dependencies...' &&
        while ! nc -z db 5432; do sleep 1; done &&
        while ! nc -z redis 6379; do sleep 1; done &&
        echo 'Dependencies ready!' &&
        
        echo 'Testing Docker access...' &&
        if docker version >/dev/null 2>&1; then
          echo '✅ Docker access confirmed - Code execution will work'
          echo 'Creating code execution network...'
          docker network create wokkahlearn_execution --driver bridge 2>/dev/null || echo 'Network already exists'
        else
          echo '⚠️  Docker not accessible - Code execution will be limited'
        fi &&
        
        echo 'Making migrations...' &&
        python manage.py makemigrations &&
        
        echo 'Running migrations...' &&
        python manage.py migrate --noinput &&
        python manage.py migrate django_celery_beat --noinput &&
        
        echo 'Creating superuser...' &&
        python create_superuser.py &&
        echo 'Collecting static files...' &&
        python manage.py collectstatic --noinput &&
        
        echo 'Starting Django development server...' &&
        echo '📡 Backend will be available at: http://localhost:8000' &&
        echo '🔧 Admin panel: http://localhost:8000/admin/' &&
        echo '📚 API docs: http://localhost:8000/api/schema/swagger-ui/' &&
        python manage.py runserver 0.0.0.0:8000
      "


  # Celery Worker (Background Tasks)
  celery_worker:
    build:
      context: .
      dockerfile: backend/Dockerfile
    restart: unless-stopped
    environment:
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-wokkahlearn-dev-secret-key-change-in-production}
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-1234}@db:5432/${DB_NAME:-wokkahlearn}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - AI_DEFAULT_PROVIDER=${AI_DEFAULT_PROVIDER:-mock}
      - CODE_EXECUTION_ENABLED=True
      - DOCKER_HOST=unix:///var/run/docker.sock
      - EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
      - AWS_ACCESS_KEY_ID=
      - AWS_SECRET_ACCESS_KEY=
    volumes:
      - .:/app
      - media_files:/app/media
      # HOST DOCKER ACCESS for code execution tasks
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker:ro
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "celery", "-A", "wokkahlearn", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - wokkahlearn_network
      - wokkahlearn_execution
    command: >
      bash -c "
        echo '⚙️ Starting Celery Worker...' &&
        while ! nc -z backend 8000; do sleep 1; done &&
        echo 'Backend is ready, starting Celery worker...' &&
        celery -A wokkahlearn worker --loglevel=info --concurrency=4
      "

  # Celery Beat (Scheduled Tasks)
  celery_beat:
    build:
      context: .
      dockerfile: backend/Dockerfile
    restart: unless-stopped
    environment:
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-wokkahlearn-dev-secret-key-change-in-production}
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-1234}@db:5432/${DB_NAME:-wokkahlearn}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    volumes:
      - .:/app
      - celery_beat_data:/app/celerybeat
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import os; exit(0 if os.path.exists('/app/celerybeat.pid') else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - wokkahlearn_network
    command: >
      bash -c "
        echo '📅 Starting Celery Beat...' &&
        while ! nc -z backend 8000; do sleep 1; done &&
        echo 'Backend is ready, verifying database tables...' &&
        python s_celery.py &&
        echo 'Starting Celery Beat scheduler...' &&
        celery -A wokkahlearn beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_files:
    driver: local
  static_files:
    driver: local
  celery_beat_data:
    driver: local

networks:
  wokkahlearn_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  wokkahlearn_execution:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
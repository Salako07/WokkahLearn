version: '3.8'

services:
  # PostgreSQL Database - needed for accounts models
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: codelearn
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-1234}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"  # Use port 5433 externally to avoid conflict
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - needed for sessions and caching
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"  # Use port 6380 externally to avoid conflict
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend - contains the accounts app
  backend:
    build:
      context: ./backend           # Use root directory as context
      dockerfile: Dockerfile  # But use Dockerfile in backend/ subdirectory
    restart: unless-stopped
    environment:
      - DEBUG=True
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD:-postgres123}@db:5432/wokkahlearn
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,0.0.0.0
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    volumes:
      - .:/app              # Mount root directory (where manage.py is) to /app
      - media_files:/app/media
      - static_files:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Waiting for database...' &&
        while ! nc -z db 5432; do sleep 0.1; done &&
        echo 'Database is ready!' &&
        echo 'Making migrations...' &&
        python manage.py makemigrations &&
        echo 'Running migrations...' &&
        python manage.py migrate &&
        echo 'Collecting static files...' &&
        python manage.py collectstatic --noinput &&
        echo 'Starting development server...' &&
        python manage.py runserver 0.0.0.0:8000
      "

volumes:
  postgres_data:
  redis_data:
  media_files:
  static_files:

networks:
  default:
    driver: bridge
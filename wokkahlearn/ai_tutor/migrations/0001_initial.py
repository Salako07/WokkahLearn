# Generated by Django 4.2.7 on 2025-07-04 19:20

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('courses', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('model_type', models.CharField(choices=[('code_assistant', 'Code Assistant'), ('tutor', 'AI Tutor'), ('reviewer', 'Code Reviewer'), ('explainer', 'Concept Explainer'), ('quiz_generator', 'Quiz Generator'), ('curriculum', 'Curriculum Planner')], max_length=20)),
                ('provider', models.CharField(choices=[('openai', 'OpenAI'), ('anthropic', 'Anthropic'), ('cohere', 'Cohere'), ('huggingface', 'Hugging Face'), ('local', 'Local Model')], max_length=20)),
                ('model_id', models.CharField(help_text='Provider-specific model identifier', max_length=200)),
                ('max_tokens', models.PositiveIntegerField(default=4096)),
                ('temperature', models.FloatField(default=0.7, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)])),
                ('top_p', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('supports_code', models.BooleanField(default=True)),
                ('supports_streaming', models.BooleanField(default=False)),
                ('supports_function_calling', models.BooleanField(default=False)),
                ('programming_languages', models.JSONField(default=list)),
                ('cost_per_token', models.DecimalField(decimal_places=8, default=0.0, max_digits=10)),
                ('rate_limit_per_minute', models.PositiveIntegerField(default=60)),
                ('average_response_time', models.FloatField(default=0.0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'AI Model',
                'verbose_name_plural': 'AI Models',
                'ordering': ['model_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PersonalizedQuiz',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quiz_type', models.CharField(choices=[('knowledge_check', 'Knowledge Check'), ('skill_assessment', 'Skill Assessment'), ('review_quiz', 'Review Quiz'), ('challenge', 'Challenge Quiz'), ('diagnostic', 'Diagnostic Quiz')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('questions', models.JSONField(default=list)),
                ('correct_answers', models.JSONField(default=list)),
                ('explanations', models.JSONField(default=list)),
                ('difficulty_level', models.CharField(default='intermediate', max_length=20)),
                ('estimated_duration', models.DurationField()),
                ('topics_covered', models.JSONField(default=list)),
                ('based_on_weaknesses', models.JSONField(default=list)),
                ('adaptation_reason', models.TextField()),
                ('generation_prompt', models.TextField()),
                ('generation_context', models.JSONField(default=dict)),
                ('times_taken', models.PositiveIntegerField(default=0)),
                ('average_score', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_tutor.aimodel')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='personalized_quizzes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Personalized Quiz',
                'verbose_name_plural': 'Personalized Quizzes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CodeAnalysisResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('analysis_type', models.CharField(choices=[('syntax_check', 'Syntax Check'), ('style_review', 'Style Review'), ('performance', 'Performance Analysis'), ('security', 'Security Analysis'), ('best_practices', 'Best Practices'), ('debugging', 'Debugging Help'), ('optimization', 'Optimization Suggestions')], max_length=20)),
                ('overall_score', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('issues_found', models.JSONField(default=list)),
                ('suggestions', models.JSONField(default=list)),
                ('strengths', models.JSONField(default=list)),
                ('summary', models.TextField()),
                ('detailed_feedback', models.TextField()),
                ('improvement_suggestions', models.TextField()),
                ('complexity_score', models.PositiveIntegerField(blank=True, null=True)),
                ('readability_score', models.PositiveIntegerField(blank=True, null=True)),
                ('maintainability_score', models.PositiveIntegerField(blank=True, null=True)),
                ('concepts_demonstrated', models.JSONField(default=list)),
                ('missing_concepts', models.JSONField(default=list)),
                ('next_learning_steps', models.JSONField(default=list)),
                ('analysis_duration', models.FloatField(default=0.0)),
                ('tokens_used', models.PositiveIntegerField(default=0)),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ai_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_tutor.aimodel')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_analysis', to='courses.exercisesubmission')),
            ],
            options={
                'verbose_name': 'Code Analysis Result',
                'verbose_name_plural': 'Code Analysis Results',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AITutorSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_type', models.CharField(choices=[('help_request', 'Help Request'), ('code_review', 'Code Review'), ('concept_explanation', 'Concept Explanation'), ('debugging', 'Debugging Assistance'), ('learning_path', 'Learning Path Guidance'), ('assessment', 'Assessment and Feedback')], max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('paused', 'Paused'), ('terminated', 'Terminated')], default='active', max_length=20)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('initial_query', models.TextField()),
                ('context_data', models.JSONField(default=dict)),
                ('total_messages', models.PositiveIntegerField(default=0)),
                ('total_tokens_used', models.PositiveIntegerField(default=0)),
                ('total_cost', models.DecimalField(decimal_places=6, default=0.0, max_digits=10)),
                ('student_satisfaction', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('helpfulness_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('ai_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_tutor.aimodel')),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.course')),
                ('exercise', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.exercise')),
                ('lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.lesson')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI Tutor Session',
                'verbose_name_plural': 'AI Tutor Sessions',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='AITutorFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('helpfulness', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('accuracy', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('clarity', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('response_time', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('what_worked_well', models.TextField(blank=True)),
                ('what_could_improve', models.TextField(blank=True)),
                ('additional_comments', models.TextField(blank=True)),
                ('problem_solved', models.BooleanField()),
                ('would_recommend', models.BooleanField()),
                ('needs_human_tutor', models.BooleanField(default=False)),
                ('suggested_improvements', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='ai_tutor.aitutorsession')),
            ],
            options={
                'verbose_name': 'AI Tutor Feedback',
                'verbose_name_plural': 'AI Tutor Feedback',
            },
        ),
        migrations.CreateModel(
            name='AIModelUsageStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('total_requests', models.PositiveIntegerField(default=0)),
                ('total_tokens', models.PositiveIntegerField(default=0)),
                ('total_cost', models.DecimalField(decimal_places=6, default=0.0, max_digits=10)),
                ('average_response_time', models.FloatField(default=0.0)),
                ('success_rate', models.FloatField(default=100.0)),
                ('error_count', models.PositiveIntegerField(default=0)),
                ('average_rating', models.FloatField(default=0.0)),
                ('total_feedback_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ai_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_stats', to='ai_tutor.aimodel')),
            ],
            options={
                'verbose_name': 'AI Model Usage Stats',
                'verbose_name_plural': 'AI Model Usage Stats',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='AIMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message_type', models.CharField(choices=[('user', 'User Message'), ('assistant', 'AI Assistant'), ('system', 'System Message'), ('tool', 'Tool Response')], max_length=20)),
                ('content', models.TextField()),
                ('tokens_used', models.PositiveIntegerField(default=0)),
                ('response_time', models.FloatField(default=0.0)),
                ('code_language', models.CharField(blank=True, max_length=50)),
                ('code_analysis', models.JSONField(default=dict)),
                ('suggested_improvements', models.JSONField(default=list)),
                ('concepts_referenced', models.JSONField(default=list)),
                ('difficulty_level', models.CharField(blank=True, choices=[('basic', 'Basic'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], max_length=20)),
                ('requires_human_review', models.BooleanField(default=False)),
                ('confidence_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='ai_tutor.aitutorsession')),
            ],
            options={
                'verbose_name': 'AI Message',
                'verbose_name_plural': 'AI Messages',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='LearningPathRecommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('recommendation_type', models.CharField(choices=[('next_course', 'Next Course'), ('skill_gap', 'Skill Gap Analysis'), ('review_topic', 'Review Topic'), ('advanced_topic', 'Advanced Topic'), ('project_idea', 'Project Idea'), ('practice_exercise', 'Practice Exercise')], max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('reasoning', models.TextField(help_text='AI reasoning for this recommendation')),
                ('external_resource', models.URLField(blank=True)),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('estimated_completion_time', models.DurationField()),
                ('skill_level_required', models.CharField(default='beginner', max_length=20)),
                ('is_accepted', models.BooleanField(default=False)),
                ('is_dismissed', models.BooleanField(default=False)),
                ('viewed_at', models.DateTimeField(blank=True, null=True)),
                ('accepted_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('generation_context', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.course')),
                ('exercise', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.exercise')),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_tutor.aimodel')),
                ('lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.lesson')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Learning Path Recommendation',
                'verbose_name_plural': 'Learning Path Recommendations',
                'ordering': ['-priority', '-created_at'],
                'indexes': [models.Index(fields=['student', 'is_dismissed'], name='ai_tutor_le_student_62ccf1_idx'), models.Index(fields=['recommendation_type', 'priority'], name='ai_tutor_le_recomme_45407b_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='aitutorsession',
            index=models.Index(fields=['student', 'status'], name='ai_tutor_ai_student_23b073_idx'),
        ),
        migrations.AddIndex(
            model_name='aitutorsession',
            index=models.Index(fields=['session_type', 'started_at'], name='ai_tutor_ai_session_df0494_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='aimodelusagestats',
            unique_together={('ai_model', 'date')},
        ),
    ]
